[{"C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\index.js":"1","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\App.js":"2","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Components\\Sidebar.jsx":"3","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Components\\NoteList.jsx":"4","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Utils\\Classes\\note.js":"5","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Components\\Account.jsx":"6","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Utils\\events.js":"7"},{"size":314,"mtime":1620121287985,"results":"8","hashOfConfig":"9"},{"size":2775,"mtime":1620214193141,"results":"10","hashOfConfig":"9"},{"size":1002,"mtime":1620208857737,"results":"11","hashOfConfig":"9"},{"size":5731,"mtime":1620209163519,"results":"12","hashOfConfig":"9"},{"size":259,"mtime":1619525827495,"results":"13","hashOfConfig":"9"},{"size":4474,"mtime":1620216301889,"results":"14","hashOfConfig":"9"},{"size":70,"mtime":1620214016506,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1lm3w5r",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\index.js",[],["33","34"],"C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\App.js",["35","36"],"C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Components\\Sidebar.jsx",["37","38"],"import logo from \"../img/micronote.png\"\nimport \"./Sidebar.css\";\n\nimport { FontAwesomeIcon as FA} from '@fortawesome/react-fontawesome'\nimport { faUser, faUserSecret, faCog, faQuestion } from '@fortawesome/free-solid-svg-icons'\n\nconst Sidebar = ({ username, click }) => {\n\n    return (\n        <div id=\"sidebar-contents\">\n\n            <div id=\"logo\">\n                <img src={logo} alt=\"\" />\n                <h1>micronote</h1>\n                <h3>mee ê§ü cro ê§ü no ê§ü tay</h3>\n            </div>\n\n            <div className=\"info\">\n                { username ?\n                    <button onClick={click}><FA icon={faUser} /> {username}</button> : \n                    <button onClick={click}><FA icon={faUserSecret} /> guest</button>\n                }\n            </div>\n\n            {/* <div className=\"options\">\n                <button><FA icon={faCog} /></button>\n                <button><FA icon={faQuestion} /></button>\n            </div> */}\n\n        </div>\n    )\n}\n\nexport default Sidebar;","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Components\\NoteList.jsx",["39","40"],"import React, { useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport localforage from \"localforage\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport gfm from \"remark-gfm\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon as FA} from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Note } from \"../Utils/Classes/note\";\r\n\r\nimport \"./NoteList.css\";\r\n\r\nconst NoteList = ({ notes, updateNoteList }) => {\r\n\r\n    const [newNote, setNewNote] = useState(\"\");\r\n    const [noteID, setNoteID] = useState(\"\");\r\n    const [cookies, setCookies] = useCookies();\r\n\r\n    const submitNote = async (event) => {\r\n        event.preventDefault();\r\n        // if the state holds a noteID, it'll update that note\r\n        // if not it'll make a new one\r\n        if (noteID !== \"\" && newNote !== \"\") {\r\n            try {\r\n                const localNotes = await localforage.getItem(\"notes\");\r\n                const noteToUpdate = localNotes.find(note => note.id === noteID);\r\n                const updatedDate = new Date().toISOString();\r\n\r\n                noteToUpdate.text = newNote;\r\n                noteToUpdate.modifiedDate = updatedDate;\r\n\r\n                if (cookies.micronote) {\r\n                    axios.put(`/notes/${noteID}`, {\r\n                        text: newNote,\r\n                        modifiedDate: updatedDate\r\n                    }).then(res => console.log(res))\r\n                    .catch(err => console.error(err))\r\n                }\r\n\r\n                localforage.setItem(\"notes\", localNotes);\r\n                updateNoteList(localNotes);\r\n                setNewNote(\"\");\r\n                setNoteID(\"\");\r\n            } catch (error) {\r\n                console.error(error);\r\n            };\r\n        } else {\r\n            // make a new note!\r\n            if (newNote.length > 0) {\r\n                try {\r\n                    const submittedNote = new Note(newNote);\r\n                    const newNoteList = await localforage.setItem(\"notes\", [submittedNote, ...notes])\r\n                    \r\n                    if (cookies.micronote) {\r\n                        axios.post(\"/notes\", {\r\n                            list: newNoteList,\r\n                            note: submittedNote\r\n                        }).then(res => console.log(res))\r\n                            .catch(err => console.error(err))\r\n                    };\r\n\r\n                    updateNoteList(newNoteList);\r\n                    setNewNote(\"\");\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteNewNote = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (noteID === \"\" && newNote !== \"\") {\r\n            setNewNote(\"\");\r\n        } else if (noteID !== \"\") {\r\n            setNewNote(\"\");\r\n            setNoteID(\"\");\r\n        } else {\r\n            let filteredList;\r\n            const notesList = await localforage.getItem(\"notes\")\r\n\r\n            if (notesList) filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\r\n\r\n            updateNoteList(filteredList);\r\n            setNewNote(\"\");\r\n            setNoteID(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteNote = id => async () => {\r\n        if (cookies.micronote) {\r\n            axios.delete(`/notes/${id}`)\r\n                .then(res => console.log(res))\r\n                .catch(err => console.error(err));\r\n        }\r\n        \r\n        const notesList = await localforage.getItem(\"notes\")\r\n        const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\r\n        updateNoteList(filteredList);\r\n    }\r\n\r\n    const editNote = (id, text) => () => {\r\n        window.scroll({ top: 0, left: 0, behavior: \"smooth\" });\r\n        setNoteID(id);\r\n        setNewNote(text);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div id=\"new-note\">\r\n                <form id=\"note\">\r\n                    <label htmlFor=\"create-note\">Create a new note</label>\r\n                    <textarea\r\n                        value={newNote}\r\n                        onChange={event => setNewNote(event.target.value)}\r\n                        placeholder=\"New note...\"\r\n                        form=\"create-note\"\r\n                        required />\r\n                </form>\r\n\r\n                <form id=\"create-note\" className=\"actions\">\r\n                    <button onClick={deleteNewNote}><FA icon={faTimes} /></button>\r\n                    <button onClick={submitNote}><FA icon={faCheck} /></button>\r\n                </form>\r\n            </div>\r\n\r\n            <div id=\"note-list\">\r\n                { notes && \r\n                    notes.map(note => {if (note !== null) {\r\n                        return <NoteComponent\r\n                                    key={note.id}\r\n                                    id={note.id}\r\n                                    text={note.text}\r\n                                    deleteNote={deleteNote}\r\n                                    editNote={editNote} /> }\r\n                        }\r\n                    ) }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst NoteComponent = ({ text, id, editNote, deleteNote }) => {\r\n\r\n    return (\r\n        <div className=\"note\">\r\n            <ReactMarkdown className=\"text\" remarkPlugins={[gfm]}>{text}</ReactMarkdown>\r\n\r\n            <div className=\"actions\">\r\n                <button onClick={editNote(id, text)}><FA icon={faPencilAlt} /></button>\r\n                <button onClick={deleteNote(id)}><FA icon={faTrash} /></button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteList;","C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Utils\\Classes\\note.js",[],"C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Components\\Account.jsx",[],"C:\\Users\\jamie\\Documents\\Dev\\WebDev\\micronote\\client\\src\\Utils\\events.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":16,"column":20,"nodeType":"47","messageId":"48","endLine":16,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":28,"column":6,"nodeType":"51","endLine":28,"endColumn":15,"suggestions":"52"},{"ruleId":"45","severity":1,"message":"53","line":5,"column":32,"nodeType":"47","messageId":"48","endLine":5,"endColumn":37},{"ruleId":"45","severity":1,"message":"54","line":5,"column":39,"nodeType":"47","messageId":"48","endLine":5,"endColumn":49},{"ruleId":"45","severity":1,"message":"46","line":19,"column":21,"nodeType":"47","messageId":"48","endLine":19,"endColumn":31},{"ruleId":"55","severity":1,"message":"56","line":132,"column":36,"nodeType":"57","messageId":"58","endLine":132,"endColumn":38},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'setCookies' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getUserInfo' and 'getUserNotes'. Either include them or remove the dependency array.","ArrayExpression",["61"],"'faCog' is defined but never used.","'faQuestion' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [cookies, getUserInfo, getUserNotes]",{"range":"64","text":"65"},[694,703],"[cookies, getUserInfo, getUserNotes]"]