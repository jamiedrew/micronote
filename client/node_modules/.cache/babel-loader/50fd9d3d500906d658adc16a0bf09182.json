{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jamie\\\\Documents\\\\Dev\\\\WebDev\\\\micronote\\\\client\\\\src\\\\Components\\\\NoteList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport localforage from \"localforage\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome';\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { Note } from \"../Utils/Classes/note\";\nimport \"./NoteList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteList = ({\n  userID\n}) => {\n  _s();\n\n  const [noteList, setNoteList] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [noteID, setNoteID] = useState(\"\");\n  const [cookies, setCookies] = useCookies();\n\n  const getLocalNotes = async () => {\n    try {\n      const notes = await localforage.getItem(\"notes\");\n\n      if (notes) {\n        setNoteList(notes);\n      } else {\n        try {\n          localforage.setItem(\"notes\", noteList);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const submitNote = async event => {\n    event.preventDefault(); // if the state holds a noteID, it'll update that note\n    // if not it'll make a new one\n\n    if (noteID !== \"\" && newNote !== \"\") {\n      try {\n        const notes = await localforage.getItem(\"notes\");\n        const note = notes.find(note => note.id === noteID);\n        const updatedDate = new Date().toISOString();\n        note.text = newNote;\n        note.modifiedDate = updatedDate;\n\n        if (cookies.micronote) {\n          axios.put(\"/notes/noteID\", {\n            text: newNote,\n            modifiedDate: updatedDate\n          });\n        }\n\n        localforage.setItem(\"notes\", notes);\n        setNoteList(notes);\n        setNewNote(\"\");\n        setNoteID(\"\");\n      } catch (error) {\n        console.error(error);\n      }\n\n      ;\n    } else {\n      if (newNote.length > 0) {\n        try {\n          const submittedNote = new Note(newNote);\n          console.log(submittedNote);\n          const newNoteList = await localforage.setItem(\"notes\", [submittedNote, ...noteList]);\n          console.log(newNoteList);\n          axios.post(\"/notes\", {\n            list: newNoteList,\n            note: submittedNote\n          });\n          setNoteList(newNoteList);\n          setNewNote(\"\");\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  };\n\n  const deleteNewNote = async event => {\n    event.preventDefault();\n\n    if (noteID === \"\" && newNote !== \"\") {\n      setNewNote(\"\");\n    } else {\n      let filteredList;\n      const notesList = await localforage.getItem(\"notes\");\n      filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\n      setNoteList(filteredList);\n      setNewNote(\"\");\n      setNoteID(\"\");\n    }\n  }; // get local notes on page load\n  // get the synced notes if there's a cookie\n\n\n  useEffect(() => {\n    getLocalNotes(); // eslint-disable-next-line\n  }, []); // just having a look\n\n  useEffect(() => {\n    if (noteList > 0) console.log(noteList);\n  }, [noteList]);\n\n  const deleteNote = id => async () => {\n    axios.delete(`/notes/${id}`).then(res => console.log(res)).catch(err => console.error(err));\n    const notesList = await localforage.getItem(\"notes\");\n    const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\n    setNoteList(filteredList);\n  };\n\n  const editNote = (id, text) => () => {\n    setNoteID(id);\n    setNewNote(text);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-note\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"note\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"create-note\",\n          children: \"Create a new note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newNote,\n          onChange: event => setNewNote(event.target.value),\n          placeholder: \"New note...\",\n          form: \"create-note\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"create-note\",\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNewNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faCheck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"note-list\",\n      children: noteList && // eslint-disable-next-line\n      noteList.map(note => {\n        if (note !== null) {\n          return /*#__PURE__*/_jsxDEV(NoteComponent, {\n            id: note.id,\n            text: note.text,\n            deleteNote: deleteNote,\n            editNote: editNote\n          }, note.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 32\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteList, \"OfQeaoWjmZ4+Jnx1q3RcNqMC9qA=\", false, function () {\n  return [useCookies];\n});\n\n_c = NoteList;\n\nconst NoteComponent = ({\n  text,\n  id,\n  editNote,\n  deleteNote\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      className: \"text\",\n      remarkPlugins: [gfm],\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: editNote(id, text),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faPencilAlt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 54\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote(id),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faTrash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = NoteComponent;\nexport default NoteList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NoteList\");\n$RefreshReg$(_c2, \"NoteComponent\");","map":{"version":3,"sources":["C:/Users/jamie/Documents/Dev/WebDev/micronote/client/src/Components/NoteList.jsx"],"names":["React","useState","useEffect","useCookies","localforage","ReactMarkdown","gfm","axios","FontAwesomeIcon","FA","faTrash","faPencilAlt","faCheck","faTimes","Note","NoteList","userID","noteList","setNoteList","newNote","setNewNote","noteID","setNoteID","cookies","setCookies","getLocalNotes","notes","getItem","setItem","error","console","submitNote","event","preventDefault","note","find","id","updatedDate","Date","toISOString","text","modifiedDate","micronote","put","length","submittedNote","log","newNoteList","post","list","deleteNewNote","filteredList","notesList","filter","item","deleteNote","delete","then","res","catch","err","editNote","target","value","map","NoteComponent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport localforage from \"localforage\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport gfm from \"remark-gfm\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon as FA} from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Note } from \"../Utils/Classes/note\";\r\n\r\nimport \"./NoteList.css\";\r\n\r\nconst NoteList = ({ userID }) => {\r\n\r\n    const [noteList, setNoteList] = useState([]);\r\n    const [newNote, setNewNote] = useState(\"\");\r\n    const [noteID, setNoteID] = useState(\"\");\r\n    const [cookies, setCookies] = useCookies();\r\n\r\n    const getLocalNotes = async () => {\r\n        try {\r\n            const notes = await localforage.getItem(\"notes\");\r\n\r\n            if (notes) {\r\n                setNoteList(notes);\r\n            } else {\r\n                try {\r\n                    localforage.setItem(\"notes\", noteList)\r\n                } catch (error) {\r\n                   console.error(error);\r\n                } \r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const submitNote = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // if the state holds a noteID, it'll update that note\r\n        // if not it'll make a new one\r\n        if (noteID !== \"\" && newNote !== \"\") {\r\n            try {\r\n                const notes = await localforage.getItem(\"notes\");\r\n                const note = notes.find(note => note.id === noteID);\r\n                const updatedDate = new Date().toISOString();\r\n\r\n                note.text = newNote;\r\n                note.modifiedDate = updatedDate;\r\n\r\n                if (cookies.micronote) {\r\n                    axios.put(\"/notes/noteID\", {\r\n                        text: newNote,\r\n                        modifiedDate: updatedDate\r\n                    })\r\n                }\r\n                \r\n\r\n                localforage.setItem(\"notes\", notes)\r\n\r\n                setNoteList(notes);\r\n                setNewNote(\"\");\r\n                setNoteID(\"\");\r\n\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            };\r\n        } else {\r\n            if (newNote.length > 0) {\r\n                try {\r\n                    const submittedNote = new Note(newNote);\r\n                    console.log(submittedNote); \r\n                    \r\n                    const newNoteList = await localforage.setItem(\"notes\", [submittedNote, ...noteList])\r\n                    console.log(newNoteList);\r\n\r\n                    axios.post(\"/notes\", {\r\n                        list: newNoteList,\r\n                        note: submittedNote\r\n                    })\r\n\r\n                    setNoteList(newNoteList);\r\n                    setNewNote(\"\");\r\n\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteNewNote = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (noteID === \"\" && newNote !== \"\") {\r\n            setNewNote(\"\");\r\n        } else {\r\n            let filteredList;\r\n            const notesList = await localforage.getItem(\"notes\")\r\n\r\n            filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\r\n\r\n            setNoteList(filteredList);\r\n            setNewNote(\"\");\r\n            setNoteID(\"\");\r\n        }\r\n    }\r\n\r\n    // get local notes on page load\r\n    // get the synced notes if there's a cookie\r\n    useEffect(() => {\r\n        getLocalNotes();\r\n    // eslint-disable-next-line\r\n    }, []);\r\n\r\n    // just having a look\r\n    useEffect(() => {\r\n        if (noteList > 0) console.log(noteList);\r\n    }, [noteList]);\r\n\r\n    const deleteNote = id => async () => {\r\n        axios.delete(`/notes/${id}`)\r\n            .then(res => console.log(res))\r\n            .catch(err => console.error(err));\r\n\r\n        const notesList = await localforage.getItem(\"notes\")\r\n        const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\r\n        setNoteList(filteredList);\r\n    }\r\n\r\n    const editNote = (id, text) => () => {\r\n        setNoteID(id);\r\n        setNewNote(text);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div id=\"new-note\">\r\n                <div id=\"note\">\r\n                    <label htmlFor=\"create-note\">Create a new note</label>\r\n                    <textarea\r\n                        value={newNote}\r\n                        onChange={event => setNewNote(event.target.value)}\r\n                        placeholder=\"New note...\"\r\n                        form=\"create-note\"\r\n                        required />\r\n                </div>\r\n\r\n                <form id=\"create-note\" className=\"actions\">\r\n                    <button onClick={deleteNewNote}><FA icon={faTimes} /></button>\r\n                    <button onClick={submitNote}><FA icon={faCheck} /></button>\r\n                </form>\r\n            </div>\r\n\r\n            <div id=\"note-list\">\r\n                { noteList && \r\n                    // eslint-disable-next-line\r\n                    noteList.map(note => {if (note !== null) {\r\n                        return <NoteComponent\r\n                                    key={note.id}\r\n                                    id={note.id}\r\n                                    text={note.text}\r\n                                    deleteNote={deleteNote}\r\n                                    editNote={editNote} /> }\r\n                        }\r\n                    ) }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst NoteComponent = ({ text, id, editNote, deleteNote }) => {\r\n\r\n    return (\r\n        <div className=\"note\">\r\n            <ReactMarkdown className=\"text\" remarkPlugins={[gfm]}>{text}</ReactMarkdown>\r\n\r\n            <div className=\"actions\">\r\n                <button onClick={editNote(id, text)}><FA icon={faPencilAlt} /></button>\r\n                <button onClick={deleteNote(id)}><FA icon={faTrash} /></button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteList;"]},"metadata":{},"sourceType":"module"}