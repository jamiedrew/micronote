{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jamie\\\\Documents\\\\Dev\\\\WebDev\\\\micronote\\\\client\\\\src\\\\Components\\\\NoteList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport localforage from \"localforage\";\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome';\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport \"./NoteList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteList = () => {\n  _s();\n\n  const [noteList, setNoteList] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [noteID, setNoteID] = useState(\"\");\n\n  const getLocalNotes = async () => {\n    try {\n      const notes = await localforage.getItem(\"notes\");\n      setNoteList(notes);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const submitNote = async event => {\n    event.preventDefault(); // if the state holds a noteID, it'll update that note\n    // if not it'll make a new one\n\n    if (noteID !== \"\" && newNote !== \"\") {\n      try {\n        const notes = await localforage.getItem(\"notes\");\n        const note = notes.find(note => note.id === noteID);\n        note.text = newNote;\n        note.modifiedDate = new Date().toISOString();\n        localforage.setItem(\"notes\", notes);\n        setNoteList(notes);\n        setNewNote(\"\");\n        setNoteID(\"\");\n      } catch (error) {\n        console.error(error);\n      }\n\n      ;\n    } else {\n      if (newNote.length > 0) {\n        let submittedNote = {\n          id: `${Math.floor(Math.random() * 9999)}${Date.now()}`,\n          text: newNote,\n          createdDate: new Date().toISOString(),\n          modifiedDate: new Date().toISOString()\n        };\n        setNoteList([submittedNote, ...noteList]);\n        localforage.setItem(\"notes\", [submittedNote, ...noteList]).then(setNewNote(\"\"));\n      }\n    }\n  };\n\n  const deleteNewNote = async event => {\n    event.preventDefault();\n\n    if (noteID === \"\" && newNote !== \"\") {\n      setNewNote(\"\");\n    } else {\n      let filteredList;\n      const notesList = await localforage.getItem(\"notes\");\n      filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\n      setNoteList(filteredList);\n      setNewNote(\"\");\n      setNoteID(\"\");\n    }\n  };\n\n  useEffect(() => {\n    getLocalNotes();\n    console.log(noteList);\n  });\n\n  const deleteNote = id => async () => {\n    const notesList = await localforage.getItem(\"notes\");\n    const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\n    setNoteList(filteredList);\n  };\n\n  const editNote = (id, text) => () => {\n    setNoteID(id);\n    setNewNote(text);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-note\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"note\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"create-note\",\n          children: \"Create a new note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newNote,\n          onChange: event => setNewNote(event.target.value),\n          placeholder: \"New note...\",\n          form: \"create-note\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"create-note\",\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNewNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faCheck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), noteList.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"note-list\",\n      children: noteList.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        id: note.id,\n        text: note.text,\n        deleteNote: deleteNote,\n        editNote: editNote\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 37\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteList, \"rcBgCmu4vudlScte9gqODs0ZATM=\");\n\n_c = NoteList;\n\nconst Note = ({\n  text,\n  id,\n  editNote,\n  deleteNote\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: editNote(id, text),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faPencilAlt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 54\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote(id),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faTrash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Note;\nexport default NoteList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NoteList\");\n$RefreshReg$(_c2, \"Note\");","map":{"version":3,"sources":["C:/Users/jamie/Documents/Dev/WebDev/micronote/client/src/Components/NoteList.jsx"],"names":["React","useState","useEffect","localforage","FontAwesomeIcon","FA","faTrash","faPencilAlt","faCheck","faTimes","NoteList","noteList","setNoteList","newNote","setNewNote","noteID","setNoteID","getLocalNotes","notes","getItem","error","console","submitNote","event","preventDefault","note","find","id","text","modifiedDate","Date","toISOString","setItem","length","submittedNote","Math","floor","random","now","createdDate","then","deleteNewNote","filteredList","notesList","filter","item","log","deleteNote","editNote","target","value","map","Note"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport localforage from \"localforage\";\n\nimport { FontAwesomeIcon as FA} from '@fortawesome/react-fontawesome'\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\n\nimport \"./NoteList.css\";\n\nconst NoteList = () => {\n\n    const [noteList, setNoteList] = useState([]);\n    const [newNote, setNewNote] = useState(\"\");\n    const [noteID, setNoteID] = useState(\"\");\n\n    const getLocalNotes = async () => {\n        try {\n            const notes = await localforage.getItem(\"notes\");\n            setNoteList(notes);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n\n    const submitNote = async (event) => {\n        event.preventDefault();\n\n        // if the state holds a noteID, it'll update that note\n        // if not it'll make a new one\n        if (noteID !== \"\" && newNote !== \"\") {\n            try {\n\n                const notes = await localforage.getItem(\"notes\");\n                const note = notes.find(note => note.id === noteID);\n\n                note.text = newNote;\n                note.modifiedDate = new Date().toISOString();\n\n                localforage.setItem(\"notes\", notes)\n\n                setNoteList(notes);\n                setNewNote(\"\");\n                setNoteID(\"\");\n\n            } catch (error) {\n                console.error(error);\n            };\n        } else {\n            if (newNote.length > 0) {\n                let submittedNote = {\n                    id: `${Math.floor(Math.random() * 9999)}${Date.now()}`,\n                    text: newNote,\n                    createdDate: new Date().toISOString(),\n                    modifiedDate: new Date().toISOString()\n                };\n    \n                setNoteList([submittedNote, ...noteList]);\n                \n                localforage.setItem(\"notes\", [submittedNote, ...noteList])\n                    .then(setNewNote(\"\"));\n            }\n        }\n        \n    };\n\n    const deleteNewNote = async (event) => {\n\n        event.preventDefault();\n\n        if (noteID === \"\" && newNote !== \"\") {\n            setNewNote(\"\");\n        } else {\n            let filteredList;\n            const notesList = await localforage.getItem(\"notes\")\n\n            filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\n\n            setNoteList(filteredList);\n            setNewNote(\"\");\n            setNoteID(\"\");\n        }\n\n    }\n\n    useEffect(() => {\n        getLocalNotes();\n        console.log(noteList);\n    })\n\n    const deleteNote = id => async () => {\n\n        const notesList = await localforage.getItem(\"notes\")\n\n        const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\n\n        setNoteList(filteredList);\n\n    }\n\n    const editNote = (id, text) => () => {\n        setNoteID(id);\n        setNewNote(text);\n    }\n\n    return (\n\n        <React.Fragment>\n\n            <div id=\"new-note\">\n\n                <div id=\"note\">\n                    <label htmlFor=\"create-note\">Create a new note</label>\n                    <textarea\n                        value={newNote}\n                        onChange={event => setNewNote(event.target.value)}\n                        placeholder=\"New note...\"\n                        form=\"create-note\"\n                        required />\n                </div>\n\n                <form id=\"create-note\" className=\"actions\">\n                    <button onClick={deleteNewNote}><FA icon={faTimes} /></button>\n                    <button onClick={submitNote}><FA icon={faCheck} /></button>\n                </form>\n\n            </div>\n\n            { noteList.length > 0 &&  \n                <div id=\"note-list\">\n\n                    {noteList.map(note =>\n                                    <Note\n                                        key={note.id}\n                                        id={note.id}\n                                        text={note.text}\n                                        deleteNote={deleteNote}\n                                        editNote={editNote} /> \n                                    )}\n                </div>\n            }\n\n            \n\n        </React.Fragment>\n        \n    )\n}\n\nconst Note = ({ text, id, editNote, deleteNote }) => {\n\n    return (\n        <div className=\"note\">\n            <div className=\"text\">{text}</div>\n\n            <div className=\"actions\">\n                <button onClick={editNote(id, text)}><FA icon={faPencilAlt} /></button>\n                <button onClick={deleteNote(id)}><FA icon={faTrash} /></button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default NoteList;"]},"metadata":{},"sourceType":"module"}