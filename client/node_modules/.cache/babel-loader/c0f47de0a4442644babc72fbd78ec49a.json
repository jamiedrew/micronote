{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jamie\\\\Documents\\\\Dev\\\\WebDev\\\\micronote\\\\client\\\\src\\\\Components\\\\NoteList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport localforage from \"localforage\";\nimport _ from \"lodash\";\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome';\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { Note } from \"../Utils/note\";\nimport \"./NoteList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteList = () => {\n  _s();\n\n  const [noteList, setNoteList] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [noteID, setNoteID] = useState(\"\");\n\n  const getLocalNotes = async () => {\n    try {\n      const notes = await localforage.getItem(\"notes\");\n\n      if (notes) {\n        setNoteList(notes);\n        console.log(notes);\n      } else {\n        try {\n          localforage.setItem(\"notes\", noteList).then(console.log(noteList)).then(console.log(localforage.getItem(\"notes\")));\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const submitNote = async event => {\n    event.preventDefault(); // if the state holds a noteID, it'll update that note\n    // if not it'll make a new one\n\n    if (noteID !== \"\" && newNote !== \"\") {\n      try {\n        const notes = await localforage.getItem(\"notes\");\n        const note = notes.find(note => note.id === noteID);\n        note.text = newNote;\n        note.modifiedDate = new Date().toISOString();\n        localforage.setItem(\"notes\", notes);\n        setNoteList(notes);\n        setNewNote(\"\");\n        setNoteID(\"\");\n      } catch (error) {\n        console.error(error);\n      }\n\n      ;\n    } else {\n      if (newNote.length > 0) {\n        try {\n          const submittedNote = new Note(newNote);\n          console.log(submittedNote);\n          const newNoteList = await localforage.setItem(\"notes\", [submittedNote, ...noteList]);\n          console.log(newNoteList);\n          setNoteList(newNoteList);\n          setNewNote(\"\");\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  };\n\n  const deleteNewNote = async event => {\n    event.preventDefault();\n\n    if (noteID === \"\" && newNote !== \"\") {\n      setNewNote(\"\");\n    } else {\n      let filteredList;\n      const notesList = await localforage.getItem(\"notes\");\n      filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\n      setNoteList(filteredList);\n      setNewNote(\"\");\n      setNoteID(\"\");\n    }\n  }; // get local notes on page load\n\n\n  useEffect(() => {\n    getLocalNotes();\n  }, []); // just having a look\n\n  useEffect(() => console.log(noteList), [noteList]);\n\n  const deleteNote = id => async () => {\n    const notesList = await localforage.getItem(\"notes\");\n    const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\n    setNoteList(filteredList);\n  };\n\n  const editNote = (id, text) => () => {\n    setNoteID(id);\n    setNewNote(text);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-note\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"note\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"create-note\",\n          children: \"Create a new note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newNote,\n          onChange: event => setNewNote(event.target.value),\n          placeholder: \"New note...\",\n          form: \"create-note\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"create-note\",\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNewNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faCheck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"note-list\",\n      children: noteList && noteList.map(note => {\n        if (note) {\n          return /*#__PURE__*/_jsxDEV(NoteComponent, {\n            id: note.id,\n            text: note.text,\n            deleteNote: deleteNote,\n            editNote: editNote\n          }, note.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 62\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteList, \"GQLTSCIqtolV/iPFmDRbbht7RaE=\");\n\n_c = NoteList;\n\nconst NoteComponent = ({\n  text,\n  id,\n  editNote,\n  deleteNote\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: editNote(id, text),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faPencilAlt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 54\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote(id),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faTrash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = NoteComponent;\nexport default NoteList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NoteList\");\n$RefreshReg$(_c2, \"NoteComponent\");","map":{"version":3,"sources":["C:/Users/jamie/Documents/Dev/WebDev/micronote/client/src/Components/NoteList.jsx"],"names":["React","useState","useEffect","localforage","_","FontAwesomeIcon","FA","faTrash","faPencilAlt","faCheck","faTimes","Note","NoteList","noteList","setNoteList","newNote","setNewNote","noteID","setNoteID","getLocalNotes","notes","getItem","console","log","setItem","then","error","submitNote","event","preventDefault","note","find","id","text","modifiedDate","Date","toISOString","length","submittedNote","newNoteList","deleteNewNote","filteredList","notesList","filter","item","deleteNote","editNote","target","value","map","NoteComponent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport localforage from \"localforage\";\r\nimport _ from \"lodash\";\r\n\r\nimport { FontAwesomeIcon as FA} from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Note } from \"../Utils/note\";\r\n\r\nimport \"./NoteList.css\";\r\n\r\nconst NoteList = () => {\r\n\r\n    const [noteList, setNoteList] = useState([]);\r\n    const [newNote, setNewNote] = useState(\"\");\r\n    const [noteID, setNoteID] = useState(\"\");\r\n\r\n    const getLocalNotes = async () => {\r\n        try {\r\n            const notes = await localforage.getItem(\"notes\");\r\n\r\n            if (notes) {\r\n                setNoteList(notes);\r\n                console.log(notes);\r\n            } else {\r\n                try {\r\n                    localforage.setItem(\"notes\", noteList)\r\n                        .then(console.log(noteList))\r\n                        .then(console.log(localforage.getItem(\"notes\")));\r\n                } catch (error) {\r\n                   console.error(error);\r\n                } \r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const submitNote = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // if the state holds a noteID, it'll update that note\r\n        // if not it'll make a new one\r\n        if (noteID !== \"\" && newNote !== \"\") {\r\n            try {\r\n                const notes = await localforage.getItem(\"notes\");\r\n                const note = notes.find(note => note.id === noteID);\r\n\r\n                note.text = newNote;\r\n                note.modifiedDate = new Date().toISOString();\r\n\r\n                localforage.setItem(\"notes\", notes)\r\n\r\n                setNoteList(notes);\r\n                setNewNote(\"\");\r\n                setNoteID(\"\");\r\n            } catch (error) {\r\n                console.error(error);\r\n            };\r\n        } else {\r\n            if (newNote.length > 0) {\r\n                try {\r\n                    const submittedNote = new Note(newNote);\r\n                    console.log(submittedNote); \r\n                    \r\n                    const newNoteList = await localforage.setItem(\"notes\", [submittedNote, ...noteList])\r\n                    console.log(newNoteList);\r\n                    setNoteList(newNoteList);\r\n                    setNewNote(\"\");\r\n\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        }\r\n        \r\n    };\r\n\r\n    const deleteNewNote = async (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (noteID === \"\" && newNote !== \"\") {\r\n            setNewNote(\"\");\r\n        } else {\r\n            let filteredList;\r\n            const notesList = await localforage.getItem(\"notes\")\r\n\r\n            filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\r\n\r\n            setNoteList(filteredList);\r\n            setNewNote(\"\");\r\n            setNoteID(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    // get local notes on page load\r\n    useEffect(() => {\r\n        getLocalNotes();\r\n    }, []);\r\n\r\n    // just having a look\r\n    useEffect(() => console.log(noteList), [noteList])\r\n\r\n    const deleteNote = id => async () => {\r\n        const notesList = await localforage.getItem(\"notes\")\r\n        const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\r\n        setNoteList(filteredList);\r\n    }\r\n\r\n    const editNote = (id, text) => () => {\r\n        setNoteID(id);\r\n        setNewNote(text);\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n\r\n            <div id=\"new-note\">\r\n\r\n                <div id=\"note\">\r\n                    <label htmlFor=\"create-note\">Create a new note</label>\r\n                    <textarea\r\n                        value={newNote}\r\n                        onChange={event => setNewNote(event.target.value)}\r\n                        placeholder=\"New note...\"\r\n                        form=\"create-note\"\r\n                        required />\r\n                </div>\r\n\r\n                <form id=\"create-note\" className=\"actions\">\r\n                    <button onClick={deleteNewNote}><FA icon={faTimes} /></button>\r\n                    <button onClick={submitNote}><FA icon={faCheck} /></button>\r\n                </form>\r\n\r\n            </div>\r\n\r\n            <div id=\"note-list\">\r\n                { noteList && \r\n                    noteList.map(note => {if (note) { return <NoteComponent\r\n                                                key={note.id}\r\n                                                id={note.id}\r\n                                                text={note.text}\r\n                                                deleteNote={deleteNote}\r\n                                                editNote={editNote} /> }  } ) }\r\n            </div>\r\n\r\n            \r\n\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nconst NoteComponent = ({ text, id, editNote, deleteNote }) => {\r\n\r\n    return (\r\n        <div className=\"note\">\r\n            <div className=\"text\">{text}</div>\r\n\r\n            <div className=\"actions\">\r\n                <button onClick={editNote(id, text)}><FA icon={faPencilAlt} /></button>\r\n                <button onClick={deleteNote(id)}><FA icon={faTrash} /></button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteList;"]},"metadata":{},"sourceType":"module"}