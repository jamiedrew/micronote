{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jamie\\\\Documents\\\\Dev\\\\WebDev\\\\micronote\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport localforage from \"localforage\";\nimport Sidebar from \"./Components/Sidebar\";\nimport NoteList from \"./Components/NoteList\";\nimport Account from \"./Components/Account\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [cookies, setCookies] = useCookies();\n  const [user, setUser] = useState({});\n  const [notes, setNotes] = useState([]); // get user on page load if a cookie exists for micronote\n\n  useEffect(() => {\n    getUserInfo();\n    getUserNotes();\n  }, [cookies]); // pass down these functions to update them from the top level\n\n  const updateUserState = async user => {\n    await setUser(user);\n  };\n\n  const updateNoteList = async list => {\n    await setNotes(list);\n  }; // on page load\n\n\n  const getUserInfo = async () => {\n    try {\n      if (cookies.micronote) {\n        const {\n          data\n        } = await axios.get(\"/account/user\");\n        setUser({\n          id: data.id,\n          username: data.username\n        });\n      } else {\n        return;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n\n    ;\n  };\n\n  const getUserNotes = async () => {\n    try {\n      if (cookies.micronote) {\n        const {\n          data\n        } = await axios.get(\"/notes\", {\n          list: notes\n        }); // sync those changes to the local storage at the same time as setting the note list, for storage\n\n        localforage.setItem(\"notes\", data);\n        setNotes(data);\n      } else {\n        const localNotes = await localforage.getItem(\"notes\");\n\n        if (localNotes && localNotes.length > 0) {\n          setNotes(localNotes);\n        } else {\n          let newLocalNotes = await localforage.setItem(\"notes\", []);\n          setNotes(newLocalNotes);\n        }\n\n        ;\n      }\n\n      ;\n    } catch (error) {\n      console.error(error);\n    }\n\n    ;\n  }; // show/hide account management panel\n  // // DEBUG - making sure the user is being set\n  // useEffect(() => {\n  //   if (user.id) console.log(user);\n  // }, [user])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Account, {\n      id: user.id,\n      username: user.username,\n      updateUserState: updateUserState,\n      updateNoteList: updateNoteList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(Sidebar, {\n        username: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: notes,\n        updateNoteList: updateNoteList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"0xhlrCB3WxYC4Vklnu+sX+e7AdI=\", false, function () {\n  return [useCookies];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jamie/Documents/Dev/WebDev/micronote/client/src/App.js"],"names":["React","useState","useEffect","useCookies","axios","localforage","Sidebar","NoteList","Account","App","cookies","setCookies","user","setUser","notes","setNotes","getUserInfo","getUserNotes","updateUserState","updateNoteList","list","micronote","data","get","id","username","error","console","setItem","localNotes","getItem","length","newLocalNotes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport localforage from \"localforage\";\n\nimport Sidebar from \"./Components/Sidebar\";\nimport NoteList from \"./Components/NoteList\";\nimport Account from \"./Components/Account\";\n\nimport './App.css';\n\nfunction App() {\n\n  const [ cookies, setCookies ] = useCookies();\n  const [ user, setUser ] = useState({});\n  const [ notes, setNotes ] = useState([])\n\n  // get user on page load if a cookie exists for micronote\n  useEffect(() => {\n\n    getUserInfo();\n    getUserNotes();\n\n  }, [cookies])\n\n  // pass down these functions to update them from the top level\n  const updateUserState = async (user) => {\n    await setUser(user);\n  }\n\n  const updateNoteList = async (list) => {\n    await setNotes(list);\n  }\n\n  // on page load\n  const getUserInfo = async () => {\n      try {\n        if (cookies.micronote) {\n          const { data } = await axios.get(\"/account/user\");\n          setUser({ id: data.id, username: data.username });\n        } else {\n          return;\n        }\n      } catch (error) {\n        console.error(error);\n      };\n    };\n\n  const getUserNotes = async () => {\n    try {\n      if (cookies.micronote) {\n        const { data } = await axios.get(\"/notes\", { list: notes })\n        // sync those changes to the local storage at the same time as setting the note list, for storage\n        localforage.setItem(\"notes\", data);\n        setNotes(data);\n      } else {\n        const localNotes = await localforage.getItem(\"notes\");\n        if (localNotes && localNotes.length > 0) {\n          setNotes(localNotes);\n        } else {\n          let newLocalNotes = await localforage.setItem(\"notes\", []);\n          setNotes(newLocalNotes);\n        };\n      };\n    } catch (error) {\n      console.error(error);\n    };\n  }\n\n  // show/hide account management panel\n\n  // // DEBUG - making sure the user is being set\n  // useEffect(() => {\n  //   if (user.id) console.log(user);\n  // }, [user])\n\n  return (\n\n      <div className=\"App\">\n\n        {/* account management */}\n        <Account id={user.id} username={user.username} updateUserState={updateUserState} updateNoteList={updateNoteList} />\n\n        {/* sidebar */}\n        <div id=\"sidebar\">\n          <Sidebar username={user.username} />\n        </div>\n\n        {/* main content */}\n        <div id=\"main\">\n          <NoteList notes={notes} updateNoteList={updateNoteList} />\n        </div>\n\n      </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}