{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jamie\\\\Documents\\\\Dev\\\\WebDev\\\\micronote\\\\client\\\\src\\\\Components\\\\NoteList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport localforage from \"localforage\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome';\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { Note } from \"../Utils/Classes/note\";\nimport \"./NoteList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteList = ({\n  notes,\n  updateNoteList\n}) => {\n  _s();\n\n  const [newNote, setNewNote] = useState(\"\");\n  const [noteID, setNoteID] = useState(\"\");\n  const [cookies, setCookies] = useCookies();\n\n  const submitNote = async event => {\n    event.preventDefault(); // if the state holds a noteID, it'll update that note\n    // if not it'll make a new one\n\n    if (noteID !== \"\" && newNote !== \"\") {\n      try {\n        const localNotes = await localforage.getItem(\"notes\");\n        const noteToUpdate = localNotes.find(note => note.id === noteID);\n        const updatedDate = new Date().toISOString();\n        noteToUpdate.text = newNote;\n        noteToUpdate.modifiedDate = updatedDate;\n\n        if (cookies.micronote) {\n          axios.put(`/notes/${noteID}`, {\n            text: newNote,\n            modifiedDate: updatedDate\n          }).then(res => console.log(res)).catch(err => console.error(err));\n        }\n\n        localforage.setItem(\"notes\", localNotes);\n        updateNoteList(localNotes);\n        setNewNote(\"\");\n        setNoteID(\"\");\n      } catch (error) {\n        console.error(error);\n      }\n\n      ;\n    } else {\n      // make a new note!\n      if (newNote.length > 0) {\n        try {\n          const submittedNote = new Note(newNote);\n          const newNoteList = await localforage.setItem(\"notes\", [submittedNote, ...notes]);\n\n          if (cookies.micronote) {\n            axios.post(\"/notes\", {\n              list: newNoteList,\n              note: submittedNote\n            }).then(res => console.log(res)).catch(err => console.error(err));\n          }\n\n          ;\n          updateNoteList(newNoteList);\n          setNewNote(\"\");\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  };\n\n  const deleteNewNote = async event => {\n    event.preventDefault();\n\n    if (noteID === \"\" && newNote !== \"\") {\n      setNewNote(\"\");\n    } else if (noteID !== \"\") {\n      setNewNote(\"\");\n      setNoteID(\"\");\n    } else {\n      let filteredList;\n      const notesList = await localforage.getItem(\"notes\");\n      if (notesList) filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\n      updateNoteList(filteredList);\n      setNewNote(\"\");\n      setNoteID(\"\");\n    }\n  };\n\n  const deleteNote = id => async () => {\n    if (cookies.micronote) {\n      axios.delete(`/notes/${id}`).then(res => console.log(res)).catch(err => console.error(err));\n    }\n\n    const notesList = await localforage.getItem(\"notes\");\n    const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\n    updateNoteList(filteredList);\n  };\n\n  const editNote = (id, text) => () => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: \"smooth\"\n    });\n    setNoteID(id);\n    setNewNote(text);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-note\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"note\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"create-note\",\n          children: \"Create a new note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newNote,\n          onChange: event => setNewNote(event.target.value),\n          placeholder: \"New note...\",\n          form: \"create-note\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"create-note\",\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNewNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitNote,\n          children: /*#__PURE__*/_jsxDEV(FA, {\n            icon: faCheck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"note-list\",\n      children: notes && notes.map(note => {\n        if (note !== null) {\n          return /*#__PURE__*/_jsxDEV(NoteComponent, {\n            id: note.id,\n            text: note.text,\n            deleteNote: deleteNote,\n            editNote: editNote\n          }, note.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 32\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteList, \"B4BNNPvG8pMF6DhdwtN24szS+x4=\", false, function () {\n  return [useCookies];\n});\n\n_c = NoteList;\n\nconst NoteComponent = ({\n  text,\n  id,\n  editNote,\n  deleteNote\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      className: \"text\",\n      remarkPlugins: [gfm],\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: editNote(id, text),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faPencilAlt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 54\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote(id),\n        children: /*#__PURE__*/_jsxDEV(FA, {\n          icon: faTrash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = NoteComponent;\nexport default NoteList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NoteList\");\n$RefreshReg$(_c2, \"NoteComponent\");","map":{"version":3,"sources":["C:/Users/jamie/Documents/Dev/WebDev/micronote/client/src/Components/NoteList.jsx"],"names":["React","useState","useCookies","localforage","ReactMarkdown","gfm","axios","FontAwesomeIcon","FA","faTrash","faPencilAlt","faCheck","faTimes","Note","NoteList","notes","updateNoteList","newNote","setNewNote","noteID","setNoteID","cookies","setCookies","submitNote","event","preventDefault","localNotes","getItem","noteToUpdate","find","note","id","updatedDate","Date","toISOString","text","modifiedDate","micronote","put","then","res","console","log","catch","err","error","setItem","length","submittedNote","newNoteList","post","list","deleteNewNote","filteredList","notesList","filter","item","deleteNote","delete","editNote","window","scroll","top","left","behavior","target","value","map","NoteComponent"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport localforage from \"localforage\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport gfm from \"remark-gfm\";\r\nimport axios from \"axios\";\r\n\r\nimport { FontAwesomeIcon as FA} from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faPencilAlt, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Note } from \"../Utils/Classes/note\";\r\n\r\nimport \"./NoteList.css\";\r\n\r\nconst NoteList = ({ notes, updateNoteList }) => {\r\n\r\n    const [newNote, setNewNote] = useState(\"\");\r\n    const [noteID, setNoteID] = useState(\"\");\r\n    const [cookies, setCookies] = useCookies();\r\n\r\n    const submitNote = async (event) => {\r\n        event.preventDefault();\r\n        // if the state holds a noteID, it'll update that note\r\n        // if not it'll make a new one\r\n        if (noteID !== \"\" && newNote !== \"\") {\r\n            try {\r\n                const localNotes = await localforage.getItem(\"notes\");\r\n                const noteToUpdate = localNotes.find(note => note.id === noteID);\r\n                const updatedDate = new Date().toISOString();\r\n\r\n                noteToUpdate.text = newNote;\r\n                noteToUpdate.modifiedDate = updatedDate;\r\n\r\n                if (cookies.micronote) {\r\n                    axios.put(`/notes/${noteID}`, {\r\n                        text: newNote,\r\n                        modifiedDate: updatedDate\r\n                    }).then(res => console.log(res))\r\n                    .catch(err => console.error(err))\r\n                }\r\n\r\n                localforage.setItem(\"notes\", localNotes);\r\n                updateNoteList(localNotes);\r\n                setNewNote(\"\");\r\n                setNoteID(\"\");\r\n            } catch (error) {\r\n                console.error(error);\r\n            };\r\n        } else {\r\n            // make a new note!\r\n            if (newNote.length > 0) {\r\n                try {\r\n                    const submittedNote = new Note(newNote);\r\n                    const newNoteList = await localforage.setItem(\"notes\", [submittedNote, ...notes])\r\n                    \r\n                    if (cookies.micronote) {\r\n                        axios.post(\"/notes\", {\r\n                            list: newNoteList,\r\n                            note: submittedNote\r\n                        }).then(res => console.log(res))\r\n                            .catch(err => console.error(err))\r\n                    };\r\n\r\n                    updateNoteList(newNoteList);\r\n                    setNewNote(\"\");\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteNewNote = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (noteID === \"\" && newNote !== \"\") {\r\n            setNewNote(\"\");\r\n        } else if (noteID !== \"\") {\r\n            setNewNote(\"\");\r\n            setNoteID(\"\");\r\n        } else {\r\n            let filteredList;\r\n            const notesList = await localforage.getItem(\"notes\")\r\n\r\n            if (notesList) filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== noteID));\r\n\r\n            updateNoteList(filteredList);\r\n            setNewNote(\"\");\r\n            setNoteID(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteNote = id => async () => {\r\n        if (cookies.micronote) {\r\n            axios.delete(`/notes/${id}`)\r\n                .then(res => console.log(res))\r\n                .catch(err => console.error(err));\r\n        }\r\n        \r\n        const notesList = await localforage.getItem(\"notes\")\r\n        const filteredList = await localforage.setItem(\"notes\", notesList.filter(item => item.id !== id));\r\n        updateNoteList(filteredList);\r\n    }\r\n\r\n    const editNote = (id, text) => () => {\r\n        window.scroll({ top: 0, left: 0, behavior: \"smooth\" });\r\n        setNoteID(id);\r\n        setNewNote(text);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div id=\"new-note\">\r\n                <form id=\"note\">\r\n                    <label htmlFor=\"create-note\">Create a new note</label>\r\n                    <textarea\r\n                        value={newNote}\r\n                        onChange={event => setNewNote(event.target.value)}\r\n                        placeholder=\"New note...\"\r\n                        form=\"create-note\"\r\n                        required />\r\n                </form>\r\n\r\n                <form id=\"create-note\" className=\"actions\">\r\n                    <button onClick={deleteNewNote}><FA icon={faTimes} /></button>\r\n                    <button onClick={submitNote}><FA icon={faCheck} /></button>\r\n                </form>\r\n            </div>\r\n\r\n            <div id=\"note-list\">\r\n                { notes && \r\n                    notes.map(note => {if (note !== null) {\r\n                        return <NoteComponent\r\n                                    key={note.id}\r\n                                    id={note.id}\r\n                                    text={note.text}\r\n                                    deleteNote={deleteNote}\r\n                                    editNote={editNote} /> }\r\n                        }\r\n                    ) }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst NoteComponent = ({ text, id, editNote, deleteNote }) => {\r\n\r\n    return (\r\n        <div className=\"note\">\r\n            <ReactMarkdown className=\"text\" remarkPlugins={[gfm]}>{text}</ReactMarkdown>\r\n\r\n            <div className=\"actions\">\r\n                <button onClick={editNote(id, text)}><FA icon={faPencilAlt} /></button>\r\n                <button onClick={deleteNote(id)}><FA icon={faTrash} /></button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteList;"]},"metadata":{},"sourceType":"module"}